name: Symfall CI/CD Flow

on:
  push:
    branches: [ develop, master ]
  pull_request:
    branches: [ develop, master ]

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Build and Check quality
        run: |
          cp .env.dist .env
          docker-compose run -e DEPLOYMENT_ARCHITECTURE=test -e SECRET_KEY=secret_test_key \
           --entrypoint="" -T api bash -c \
          "poetry export --without-hashes --dev | poetry run pip install -r /dev/stdin && \
           pylint --load-plugins pylint_django --django-settings-module=settings ../src && \
           pytest -n 4 ."

  build:
    name: Build
    runs-on: ubuntu-latest

    needs: [ check ]
    if: ${{ success() && github.event_name == 'push' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: api
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and push it to ECR
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

#  deploy:
#    name: Deploy
#    runs-on: ubuntu-latest
#    needs: [ build ]
#    if: ${{ success() && github.event_name == 'push' }}
#
#    steps:
#      - uses: actions/checkout@v2
#      - name: Deploy to server
#        uses: wshihadeh/docker-deployment-action@v2
#        env:
#          PASSWORD: ${{ secrets.PASSWORD }}
#        with:
#          remote_docker_host: root@0.0.0.0
#          ssh_private_key: ${{ secrets.DOCKER_SSH_PRIVATE_KEY }}
#          ssh_public_key: ${{ secrets.DOCKER_SSH_PUBLIC_KEY }}
#          stack_file_name: docker-compose.server.yml
#          args: up -d
